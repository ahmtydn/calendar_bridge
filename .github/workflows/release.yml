name: Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.35.4'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      - name: Install dependencies
        run: flutter pub get
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
      - name: Analyze project source
        run: dart analyze --fatal-infos --fatal-warnings .

  test:
    name: Test
    needs: analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Run tests
        run: flutter test --coverage
      
      - name: Install example dependencies
        working-directory: example
        run: flutter pub get
      
      - name: Test example
        working-directory: example
        run: flutter test

  publish:
    name: Publish Package
    needs: [analyze, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Check if new version needed
        id: version_check
        run: |
          # Get current version from pubspec.yaml
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
          PACKAGE_NAME=$(grep '^name:' pubspec.yaml | sed 's/name: //' | tr -d ' ')
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          
          # Check if this version exists on pub.dev
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://pub.dev/api/packages/$PACKAGE_NAME/versions/$CURRENT_VERSION")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version $CURRENT_VERSION already exists on pub.dev"
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "Version $CURRENT_VERSION does not exist on pub.dev"
          fi
      
      - name: Get latest version and commits
        id: changelog_data
        if: steps.version_check.outputs.version_exists == 'true'
        run: |
          PACKAGE_NAME="${{ steps.version_check.outputs.package_name }}"
          
          # Get latest published version
          LATEST_VERSION=$(curl -s "https://pub.dev/api/packages/$PACKAGE_NAME" | jq -r '.latest.version // "0.0.0"')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # Get commits since last version tag (if exists)
          if git tag -l "v$LATEST_VERSION" | grep -q "v$LATEST_VERSION"; then
            COMMITS=$(git log "v$LATEST_VERSION"..HEAD --oneline --no-merges)
          else
            # If no tag exists, get recent commits
            COMMITS=$(git log --oneline --no-merges -n 10)
          fi
          
          # Save commits to environment
          echo "COMMITS_DATA<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Increment version
        id: new_version
        if: steps.version_check.outputs.version_exists == 'true'
        run: |
          CURRENT_VERSION="${{ steps.version_check.outputs.current_version }}"
          
          # Parse semantic version
          IFS='.' read -ra ADDR <<< "$CURRENT_VERSION"
          MAJOR=${ADDR[0]}
          MINOR=${ADDR[1]}
          PATCH=${ADDR[2]}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update pubspec.yaml
          sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
          
          echo "Version incremented from $CURRENT_VERSION to $NEW_VERSION"
      
      - name: Update changelog
        if: steps.version_check.outputs.version_exists == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          DATE=$(date +"%Y-%m-%d")
          
          # Create temporary changelog entry
          {
            echo "## $NEW_VERSION - $DATE"
            echo ""
            
            # Process commits into changelog format
            if [ -n "$COMMITS_DATA" ]; then
              echo "$COMMITS_DATA" | while read -r line; do
                if [ -n "$line" ]; then
                  COMMIT_HASH=$(echo "$line" | cut -d' ' -f1)
                  COMMIT_MSG=$(echo "$line" | cut -d' ' -f2-)
                  echo "- $COMMIT_MSG (\`$COMMIT_HASH\`)"
                fi
              done
            fi
            
            echo ""
          } > new_changelog_entry.md
          
          # Prepend to existing changelog
          if [ -f CHANGELOG.md ]; then
            {
              head -n 1 CHANGELOG.md  # Keep the title
              echo ""
              cat new_changelog_entry.md
              tail -n +2 CHANGELOG.md | tail -n +2  # Skip title and first empty line
            } > temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            {
              echo "# Changelog"
              echo ""
              cat new_changelog_entry.md
            } > CHANGELOG.md
          fi
          
          rm new_changelog_entry.md
      
      - name: Commit changes
        if: steps.version_check.outputs.version_exists == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add pubspec.yaml CHANGELOG.md
          git commit -m "chore: release version $NEW_VERSION [skip ci]"
          git tag "v$NEW_VERSION"
          git push origin HEAD --tags
      
      - name: Setup pub credentials
        run: |
          mkdir -p $HOME/.config/dart
          echo '${{ secrets.PUB_JSON }}' > $HOME/.config/dart/pub-credentials.json
      
      - name: Publish to pub.dev
        run: |
          dart pub get
          dart pub publish --force
      
      - name: Create GitHub Release
        if: steps.version_check.outputs.version_exists == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          name: Release v${{ steps.new_version.outputs.new_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}